# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Get changelog from git"
  lane :changelog do
    # ensure_git_branch(branch: 'master')
    version_code = get_version_code
    if git_tag_exists(tag: "android/latest")
      changelog = changelog_from_git_commits(
        between: ["android/latest", "HEAD"],
        pretty: "- %s",
        merge_commit_filtering: "exclude_merges",
        quiet: true
      )
    else
      UI.message("No previous tag found, creating a new one")
      UI.message("Creating changelog from last tag (#{last_git_tag})")
      changelog = changelog_from_git_commits(
        between: ["#{last_git_tag}", "HEAD"],
        pretty: "- %s",
        merge_commit_filtering: "exclude_merges",
        quiet: true
        )
      add_git_tag(tag: "android/latest", sign: true)
      end
    # UI.message(changelog)
    File.open("#{Dir.pwd}/metadata/android/en-US/changelogs/#{version_code}.txt", 'w') { |file| file.write("Git changelog:\n#{changelog}") }
    if(git_tag_exists(tag: "android/#{version_code}"))
      UI.message("Tag already exists")
    else
      UI.message("Creating version tag (#{version_code})")
      add_git_tag(
        tag: "android/#{version_code}",
        grouping: "android", 
        build_number: "#{version_code}",
        includes_lane: false,
        sign: true)
    end
    push_git_tags
  end

  lane :remove_tags do
    remove_git_tag(tag: "android/latest")
    remove_git_tag(tag: "android/#{get_version_code}")
  end

  def git_log(between:, pretty:)
    command = "git log #{between[0]}..#{between[1]} --pretty='#{pretty}'"
    Actions.sh(command)
  end

  desc "Build webapp and android app"
  lane :beta do
    sh "pnpm install && pnpm sync android"
    increment_version_code
    # increment_version_number(bump_type: "patch")
    gradle(
      task: "clean bundleRelease",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],     
        "android.injected.signing.key.alias" => ENV["KEYSTORE_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEYSTORE_ALIAS_PASSWORD"],
    }
      )
    # crashlytics
    upload_to_play_store(track: "beta")
  end

  desc "Build debug and test APK for screenshots"
  lane :build_for_screengrab do
    gradle(
      task: 'clean'
    )
    build_android_app(
      task: 'assemble',
      build_type: 'Debug'
    )
    build_android_app(
      task: 'assemble',
      build_type: 'AndroidTest'
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
