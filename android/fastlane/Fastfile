# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Get changelog from git and create a new versioned tag on the current branch"
  lane :changelog do
    version_code = get_version_code
    if git_tag_exists(tag: "android/latest")
      changelog = changelog_from_git_commits(
        between: ["android/latest", "HEAD"],
        pretty: "- %s",
        merge_commit_filtering: "only_include_merges",
        quiet: true
      )
      remove_git_tag(tag: "android/latest")
      add_git_tag(tag: "android/latest", message: "Latest Android release", sign: true)
    else
      UI.message("No previous tag found, creating a new one")
      UI.message("Creating changelog from last tag (#{last_git_tag})")
      changelog = changelog_from_git_commits(
        between: ["#{last_git_tag}", "HEAD"],
        pretty: "- %s",
        merge_commit_filtering: "exclude_merges",
        quiet: true
        )
      add_git_tag(tag: "android/latest", message: "Latest Android release", sign: true)
      end
    # UI.message(changelog)
    if(!File.exists?("#{Dir.pwd}/metadata/android/en-US/changelogs/#{version_code}.txt"))
      File.open("#{Dir.pwd}/metadata/android/en-US/changelogs/#{version_code}.txt", 'w') { |file| file.write("Git changelog:\n#{changelog}") }
      UI.message("Changelog file created at #{Dir.pwd}/metadata/android/en-US/changelogs/#{version_code}.txt")
    end
    if(git_tag_exists(tag: "android/#{version_code}"))
      UI.message("Tag already exists")
    else
      UI.message("Creating version tag (#{version_code})")
      add_git_tag(
        tag: "android/#{version_code}",
        message: "Android release version #{version_code}",
        grouping: "android", 
        build_number: "#{version_code}",
        includes_lane: false,
        sign: true)
    end
    UI.success("Changelog and tags created") 
  end

  desc "Remove remote latest and version tags. If run with local:true, only local tags will be removed"
  lane :remove_tags do |options|
    if(options[:local])
      sh "git tag -d android/latest"
      sh "git tag -d android/#{get_version_code}"
      UI.message("Local tags removed")
      next
    end

    if(git_tag_exists(tag: "android/latest"))
      remove_git_tag(tag: "android/latest")
    end
    if(git_tag_exists(tag: "android/#{get_version_code}"))
      remove_git_tag(tag: "android/#{get_version_code}")
    end
    UI.success("Remote tags removed")
  end

  desc "Build webapp and android app"
  lane :beta do |options|
    if !options[:unsafe]
      ensure_git_branch(branch: 'main')
    end
    sh "pnpm install && pnpm sync android"
    increment_version_code
    gradle(
      task: "clean bundleRelease",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],     
        "android.injected.signing.key.alias" => ENV["KEYSTORE_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEYSTORE_ALIAS_PASSWORD"],
      }
    )
    changelog
    upload_to_play_store(track: "beta")
    push_git_tags
    UI.header("Release created and uploaded to Play Store, version code: #{get_version_code}. Version tags pushed to remote: android/#{get_version_code} and android/latest")
  end

  desc "Build debug and test APK for screenshots"
  lane :build_for_screengrab do
    gradle(
      task: 'clean'
    )
    build_android_app(
      task: 'assemble',
      build_type: 'Debug'
    )
    build_android_app(
      task: 'assemble',
      build_type: 'AndroidTest'
    )
  end

  desc "Release a new version to the Google Play on production track"
  lane :release do
    ensure_git_branch(branch: 'main')

    sh "pnpm install && pnpm build:prod && pnpm cap sync android"
    increment_version_code
    gradle(
      task: "clean bundleRelease",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],     
        "android.injected.signing.key.alias" => ENV["KEYSTORE_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEYSTORE_ALIAS_PASSWORD"],
      }
    )
    changelog
    upload_to_play_store(track: "production")
    push_git_tags
    UI.header("Release created and uploaded to Play Store, version code: #{get_version_code}. Version tags pushed to remote: android/#{get_version_code} and android/latest")
  end

  error do |lane, exception|
    UI.error("Error: #{exception}")
    begin
      sh "git tag -d android/#{get_version_code} &>/dev/null"
      sh "git tag -d android/latest &>/dev/null"
    rescue Exception
    end
    UI.message("Tags removed")
    sh "git restore ../app/build.gradle"
    UI.message("build.gradle restored")
    UI.success("Restored git to previous state")
  end
end
